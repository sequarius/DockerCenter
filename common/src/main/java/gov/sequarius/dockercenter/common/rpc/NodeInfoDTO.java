/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gov.sequarius.dockercenter.common.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * node info dto
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-05")
public class NodeInfoDTO implements org.apache.thrift.TBase<NodeInfoDTO, NodeInfoDTO._Fields>, java.io.Serializable, Cloneable, Comparable<NodeInfoDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeInfoDTO");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ARCHITECTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("architecture", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FREE_DISK_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("freeDiskSpace", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FREE_MEMORY_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("freeMemorySpace", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CONTAINER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("containerCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RUNNING_CONTAINER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("RunningContainerCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DOCKER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerVersion", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DOCKER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerStatus", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodeInfoDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodeInfoDTOTupleSchemeFactory();

  public java.lang.String name; // required
  public java.lang.String ip; // optional
  public java.lang.String architecture; // required
  public long freeDiskSpace; // required
  public long freeMemorySpace; // required
  public long responseTime; // required
  public long containerCount; // required
  public long RunningContainerCount; // required
  public java.lang.String dockerVersion; // required
  public java.lang.String dockerStatus; // required
  public int tag; // optional
  public long callTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    IP((short)2, "ip"),
    ARCHITECTURE((short)3, "architecture"),
    FREE_DISK_SPACE((short)4, "freeDiskSpace"),
    FREE_MEMORY_SPACE((short)5, "freeMemorySpace"),
    RESPONSE_TIME((short)6, "responseTime"),
    CONTAINER_COUNT((short)7, "containerCount"),
    RUNNING_CONTAINER_COUNT((short)8, "RunningContainerCount"),
    DOCKER_VERSION((short)9, "dockerVersion"),
    DOCKER_STATUS((short)10, "dockerStatus"),
    TAG((short)11, "tag"),
    CALL_TIME((short)12, "callTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // IP
          return IP;
        case 3: // ARCHITECTURE
          return ARCHITECTURE;
        case 4: // FREE_DISK_SPACE
          return FREE_DISK_SPACE;
        case 5: // FREE_MEMORY_SPACE
          return FREE_MEMORY_SPACE;
        case 6: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 7: // CONTAINER_COUNT
          return CONTAINER_COUNT;
        case 8: // RUNNING_CONTAINER_COUNT
          return RUNNING_CONTAINER_COUNT;
        case 9: // DOCKER_VERSION
          return DOCKER_VERSION;
        case 10: // DOCKER_STATUS
          return DOCKER_STATUS;
        case 11: // TAG
          return TAG;
        case 12: // CALL_TIME
          return CALL_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FREEDISKSPACE_ISSET_ID = 0;
  private static final int __FREEMEMORYSPACE_ISSET_ID = 1;
  private static final int __RESPONSETIME_ISSET_ID = 2;
  private static final int __CONTAINERCOUNT_ISSET_ID = 3;
  private static final int __RUNNINGCONTAINERCOUNT_ISSET_ID = 4;
  private static final int __TAG_ISSET_ID = 5;
  private static final int __CALLTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IP,_Fields.TAG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHITECTURE, new org.apache.thrift.meta_data.FieldMetaData("architecture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREE_DISK_SPACE, new org.apache.thrift.meta_data.FieldMetaData("freeDiskSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREE_MEMORY_SPACE, new org.apache.thrift.meta_data.FieldMetaData("freeMemorySpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTAINER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("containerCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNING_CONTAINER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("RunningContainerCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCKER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("dockerVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCKER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("dockerStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeInfoDTO.class, metaDataMap);
  }

  public NodeInfoDTO() {
  }

  public NodeInfoDTO(
    java.lang.String name,
    java.lang.String architecture,
    long freeDiskSpace,
    long freeMemorySpace,
    long responseTime,
    long containerCount,
    long RunningContainerCount,
    java.lang.String dockerVersion,
    java.lang.String dockerStatus,
    long callTime)
  {
    this();
    this.name = name;
    this.architecture = architecture;
    this.freeDiskSpace = freeDiskSpace;
    setFreeDiskSpaceIsSet(true);
    this.freeMemorySpace = freeMemorySpace;
    setFreeMemorySpaceIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.containerCount = containerCount;
    setContainerCountIsSet(true);
    this.RunningContainerCount = RunningContainerCount;
    setRunningContainerCountIsSet(true);
    this.dockerVersion = dockerVersion;
    this.dockerStatus = dockerStatus;
    this.callTime = callTime;
    setCallTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeInfoDTO(NodeInfoDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetArchitecture()) {
      this.architecture = other.architecture;
    }
    this.freeDiskSpace = other.freeDiskSpace;
    this.freeMemorySpace = other.freeMemorySpace;
    this.responseTime = other.responseTime;
    this.containerCount = other.containerCount;
    this.RunningContainerCount = other.RunningContainerCount;
    if (other.isSetDockerVersion()) {
      this.dockerVersion = other.dockerVersion;
    }
    if (other.isSetDockerStatus()) {
      this.dockerStatus = other.dockerStatus;
    }
    this.tag = other.tag;
    this.callTime = other.callTime;
  }

  public NodeInfoDTO deepCopy() {
    return new NodeInfoDTO(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.ip = null;
    this.architecture = null;
    setFreeDiskSpaceIsSet(false);
    this.freeDiskSpace = 0;
    setFreeMemorySpaceIsSet(false);
    this.freeMemorySpace = 0;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setContainerCountIsSet(false);
    this.containerCount = 0;
    setRunningContainerCountIsSet(false);
    this.RunningContainerCount = 0;
    this.dockerVersion = null;
    this.dockerStatus = null;
    setTagIsSet(false);
    this.tag = 0;
    setCallTimeIsSet(false);
    this.callTime = 0;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public NodeInfoDTO setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getIp() {
    return this.ip;
  }

  public NodeInfoDTO setIp(java.lang.String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public java.lang.String getArchitecture() {
    return this.architecture;
  }

  public NodeInfoDTO setArchitecture(java.lang.String architecture) {
    this.architecture = architecture;
    return this;
  }

  public void unsetArchitecture() {
    this.architecture = null;
  }

  /** Returns true if field architecture is set (has been assigned a value) and false otherwise */
  public boolean isSetArchitecture() {
    return this.architecture != null;
  }

  public void setArchitectureIsSet(boolean value) {
    if (!value) {
      this.architecture = null;
    }
  }

  public long getFreeDiskSpace() {
    return this.freeDiskSpace;
  }

  public NodeInfoDTO setFreeDiskSpace(long freeDiskSpace) {
    this.freeDiskSpace = freeDiskSpace;
    setFreeDiskSpaceIsSet(true);
    return this;
  }

  public void unsetFreeDiskSpace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEDISKSPACE_ISSET_ID);
  }

  /** Returns true if field freeDiskSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeDiskSpace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEDISKSPACE_ISSET_ID);
  }

  public void setFreeDiskSpaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEDISKSPACE_ISSET_ID, value);
  }

  public long getFreeMemorySpace() {
    return this.freeMemorySpace;
  }

  public NodeInfoDTO setFreeMemorySpace(long freeMemorySpace) {
    this.freeMemorySpace = freeMemorySpace;
    setFreeMemorySpaceIsSet(true);
    return this;
  }

  public void unsetFreeMemorySpace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEMEMORYSPACE_ISSET_ID);
  }

  /** Returns true if field freeMemorySpace is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeMemorySpace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEMEMORYSPACE_ISSET_ID);
  }

  public void setFreeMemorySpaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEMEMORYSPACE_ISSET_ID, value);
  }

  public long getResponseTime() {
    return this.responseTime;
  }

  public NodeInfoDTO setResponseTime(long responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getContainerCount() {
    return this.containerCount;
  }

  public NodeInfoDTO setContainerCount(long containerCount) {
    this.containerCount = containerCount;
    setContainerCountIsSet(true);
    return this;
  }

  public void unsetContainerCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTAINERCOUNT_ISSET_ID);
  }

  /** Returns true if field containerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetContainerCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTAINERCOUNT_ISSET_ID);
  }

  public void setContainerCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTAINERCOUNT_ISSET_ID, value);
  }

  public long getRunningContainerCount() {
    return this.RunningContainerCount;
  }

  public NodeInfoDTO setRunningContainerCount(long RunningContainerCount) {
    this.RunningContainerCount = RunningContainerCount;
    setRunningContainerCountIsSet(true);
    return this;
  }

  public void unsetRunningContainerCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNNINGCONTAINERCOUNT_ISSET_ID);
  }

  /** Returns true if field RunningContainerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRunningContainerCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNNINGCONTAINERCOUNT_ISSET_ID);
  }

  public void setRunningContainerCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNNINGCONTAINERCOUNT_ISSET_ID, value);
  }

  public java.lang.String getDockerVersion() {
    return this.dockerVersion;
  }

  public NodeInfoDTO setDockerVersion(java.lang.String dockerVersion) {
    this.dockerVersion = dockerVersion;
    return this;
  }

  public void unsetDockerVersion() {
    this.dockerVersion = null;
  }

  /** Returns true if field dockerVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDockerVersion() {
    return this.dockerVersion != null;
  }

  public void setDockerVersionIsSet(boolean value) {
    if (!value) {
      this.dockerVersion = null;
    }
  }

  public java.lang.String getDockerStatus() {
    return this.dockerStatus;
  }

  public NodeInfoDTO setDockerStatus(java.lang.String dockerStatus) {
    this.dockerStatus = dockerStatus;
    return this;
  }

  public void unsetDockerStatus() {
    this.dockerStatus = null;
  }

  /** Returns true if field dockerStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetDockerStatus() {
    return this.dockerStatus != null;
  }

  public void setDockerStatusIsSet(boolean value) {
    if (!value) {
      this.dockerStatus = null;
    }
  }

  public int getTag() {
    return this.tag;
  }

  public NodeInfoDTO setTag(int tag) {
    this.tag = tag;
    setTagIsSet(true);
    return this;
  }

  public void unsetTag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ISSET_ID);
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ISSET_ID);
  }

  public void setTagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ISSET_ID, value);
  }

  public long getCallTime() {
    return this.callTime;
  }

  public NodeInfoDTO setCallTime(long callTime) {
    this.callTime = callTime;
    setCallTimeIsSet(true);
    return this;
  }

  public void unsetCallTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
  }

  /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCallTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
  }

  public void setCallTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((java.lang.String)value);
      }
      break;

    case ARCHITECTURE:
      if (value == null) {
        unsetArchitecture();
      } else {
        setArchitecture((java.lang.String)value);
      }
      break;

    case FREE_DISK_SPACE:
      if (value == null) {
        unsetFreeDiskSpace();
      } else {
        setFreeDiskSpace((java.lang.Long)value);
      }
      break;

    case FREE_MEMORY_SPACE:
      if (value == null) {
        unsetFreeMemorySpace();
      } else {
        setFreeMemorySpace((java.lang.Long)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Long)value);
      }
      break;

    case CONTAINER_COUNT:
      if (value == null) {
        unsetContainerCount();
      } else {
        setContainerCount((java.lang.Long)value);
      }
      break;

    case RUNNING_CONTAINER_COUNT:
      if (value == null) {
        unsetRunningContainerCount();
      } else {
        setRunningContainerCount((java.lang.Long)value);
      }
      break;

    case DOCKER_VERSION:
      if (value == null) {
        unsetDockerVersion();
      } else {
        setDockerVersion((java.lang.String)value);
      }
      break;

    case DOCKER_STATUS:
      if (value == null) {
        unsetDockerStatus();
      } else {
        setDockerStatus((java.lang.String)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((java.lang.Integer)value);
      }
      break;

    case CALL_TIME:
      if (value == null) {
        unsetCallTime();
      } else {
        setCallTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case IP:
      return getIp();

    case ARCHITECTURE:
      return getArchitecture();

    case FREE_DISK_SPACE:
      return getFreeDiskSpace();

    case FREE_MEMORY_SPACE:
      return getFreeMemorySpace();

    case RESPONSE_TIME:
      return getResponseTime();

    case CONTAINER_COUNT:
      return getContainerCount();

    case RUNNING_CONTAINER_COUNT:
      return getRunningContainerCount();

    case DOCKER_VERSION:
      return getDockerVersion();

    case DOCKER_STATUS:
      return getDockerStatus();

    case TAG:
      return getTag();

    case CALL_TIME:
      return getCallTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case IP:
      return isSetIp();
    case ARCHITECTURE:
      return isSetArchitecture();
    case FREE_DISK_SPACE:
      return isSetFreeDiskSpace();
    case FREE_MEMORY_SPACE:
      return isSetFreeMemorySpace();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case CONTAINER_COUNT:
      return isSetContainerCount();
    case RUNNING_CONTAINER_COUNT:
      return isSetRunningContainerCount();
    case DOCKER_VERSION:
      return isSetDockerVersion();
    case DOCKER_STATUS:
      return isSetDockerStatus();
    case TAG:
      return isSetTag();
    case CALL_TIME:
      return isSetCallTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeInfoDTO)
      return this.equals((NodeInfoDTO)that);
    return false;
  }

  public boolean equals(NodeInfoDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_architecture = true && this.isSetArchitecture();
    boolean that_present_architecture = true && that.isSetArchitecture();
    if (this_present_architecture || that_present_architecture) {
      if (!(this_present_architecture && that_present_architecture))
        return false;
      if (!this.architecture.equals(that.architecture))
        return false;
    }

    boolean this_present_freeDiskSpace = true;
    boolean that_present_freeDiskSpace = true;
    if (this_present_freeDiskSpace || that_present_freeDiskSpace) {
      if (!(this_present_freeDiskSpace && that_present_freeDiskSpace))
        return false;
      if (this.freeDiskSpace != that.freeDiskSpace)
        return false;
    }

    boolean this_present_freeMemorySpace = true;
    boolean that_present_freeMemorySpace = true;
    if (this_present_freeMemorySpace || that_present_freeMemorySpace) {
      if (!(this_present_freeMemorySpace && that_present_freeMemorySpace))
        return false;
      if (this.freeMemorySpace != that.freeMemorySpace)
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_containerCount = true;
    boolean that_present_containerCount = true;
    if (this_present_containerCount || that_present_containerCount) {
      if (!(this_present_containerCount && that_present_containerCount))
        return false;
      if (this.containerCount != that.containerCount)
        return false;
    }

    boolean this_present_RunningContainerCount = true;
    boolean that_present_RunningContainerCount = true;
    if (this_present_RunningContainerCount || that_present_RunningContainerCount) {
      if (!(this_present_RunningContainerCount && that_present_RunningContainerCount))
        return false;
      if (this.RunningContainerCount != that.RunningContainerCount)
        return false;
    }

    boolean this_present_dockerVersion = true && this.isSetDockerVersion();
    boolean that_present_dockerVersion = true && that.isSetDockerVersion();
    if (this_present_dockerVersion || that_present_dockerVersion) {
      if (!(this_present_dockerVersion && that_present_dockerVersion))
        return false;
      if (!this.dockerVersion.equals(that.dockerVersion))
        return false;
    }

    boolean this_present_dockerStatus = true && this.isSetDockerStatus();
    boolean that_present_dockerStatus = true && that.isSetDockerStatus();
    if (this_present_dockerStatus || that_present_dockerStatus) {
      if (!(this_present_dockerStatus && that_present_dockerStatus))
        return false;
      if (!this.dockerStatus.equals(that.dockerStatus))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (this.tag != that.tag)
        return false;
    }

    boolean this_present_callTime = true;
    boolean that_present_callTime = true;
    if (this_present_callTime || that_present_callTime) {
      if (!(this_present_callTime && that_present_callTime))
        return false;
      if (this.callTime != that.callTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetArchitecture()) ? 131071 : 524287);
    if (isSetArchitecture())
      hashCode = hashCode * 8191 + architecture.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freeDiskSpace);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freeMemorySpace);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(containerCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(RunningContainerCount);

    hashCode = hashCode * 8191 + ((isSetDockerVersion()) ? 131071 : 524287);
    if (isSetDockerVersion())
      hashCode = hashCode * 8191 + dockerVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetDockerStatus()) ? 131071 : 524287);
    if (isSetDockerStatus())
      hashCode = hashCode * 8191 + dockerStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
    if (isSetTag())
      hashCode = hashCode * 8191 + tag;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callTime);

    return hashCode;
  }

  @Override
  public int compareTo(NodeInfoDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArchitecture()).compareTo(other.isSetArchitecture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchitecture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.architecture, other.architecture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFreeDiskSpace()).compareTo(other.isSetFreeDiskSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeDiskSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeDiskSpace, other.freeDiskSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFreeMemorySpace()).compareTo(other.isSetFreeMemorySpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeMemorySpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeMemorySpace, other.freeMemorySpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseTime()).compareTo(other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContainerCount()).compareTo(other.isSetContainerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containerCount, other.containerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRunningContainerCount()).compareTo(other.isSetRunningContainerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunningContainerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RunningContainerCount, other.RunningContainerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDockerVersion()).compareTo(other.isSetDockerVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDockerVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerVersion, other.dockerVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDockerStatus()).compareTo(other.isSetDockerStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDockerStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerStatus, other.dockerStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodeInfoDTO(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("architecture:");
    if (this.architecture == null) {
      sb.append("null");
    } else {
      sb.append(this.architecture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeDiskSpace:");
    sb.append(this.freeDiskSpace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeMemorySpace:");
    sb.append(this.freeMemorySpace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("containerCount:");
    sb.append(this.containerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RunningContainerCount:");
    sb.append(this.RunningContainerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dockerVersion:");
    if (this.dockerVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.dockerVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dockerStatus:");
    if (this.dockerStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.dockerStatus);
    }
    first = false;
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      sb.append(this.tag);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("callTime:");
    sb.append(this.callTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeInfoDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeInfoDTOStandardScheme getScheme() {
      return new NodeInfoDTOStandardScheme();
    }
  }

  private static class NodeInfoDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodeInfoDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARCHITECTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.architecture = iprot.readString();
              struct.setArchitectureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FREE_DISK_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freeDiskSpace = iprot.readI64();
              struct.setFreeDiskSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREE_MEMORY_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freeMemorySpace = iprot.readI64();
              struct.setFreeMemorySpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseTime = iprot.readI64();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTAINER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.containerCount = iprot.readI64();
              struct.setContainerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RUNNING_CONTAINER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.RunningContainerCount = iprot.readI64();
              struct.setRunningContainerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOCKER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dockerVersion = iprot.readString();
              struct.setDockerVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DOCKER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dockerStatus = iprot.readString();
              struct.setDockerStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tag = iprot.readI32();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CALL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callTime = iprot.readI64();
              struct.setCallTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeInfoDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.architecture != null) {
        oprot.writeFieldBegin(ARCHITECTURE_FIELD_DESC);
        oprot.writeString(struct.architecture);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FREE_DISK_SPACE_FIELD_DESC);
      oprot.writeI64(struct.freeDiskSpace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_MEMORY_SPACE_FIELD_DESC);
      oprot.writeI64(struct.freeMemorySpace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTAINER_COUNT_FIELD_DESC);
      oprot.writeI64(struct.containerCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNNING_CONTAINER_COUNT_FIELD_DESC);
      oprot.writeI64(struct.RunningContainerCount);
      oprot.writeFieldEnd();
      if (struct.dockerVersion != null) {
        oprot.writeFieldBegin(DOCKER_VERSION_FIELD_DESC);
        oprot.writeString(struct.dockerVersion);
        oprot.writeFieldEnd();
      }
      if (struct.dockerStatus != null) {
        oprot.writeFieldBegin(DOCKER_STATUS_FIELD_DESC);
        oprot.writeString(struct.dockerStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTag()) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeI32(struct.tag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
      oprot.writeI64(struct.callTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeInfoDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeInfoDTOTupleScheme getScheme() {
      return new NodeInfoDTOTupleScheme();
    }
  }

  private static class NodeInfoDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodeInfoDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetIp()) {
        optionals.set(1);
      }
      if (struct.isSetArchitecture()) {
        optionals.set(2);
      }
      if (struct.isSetFreeDiskSpace()) {
        optionals.set(3);
      }
      if (struct.isSetFreeMemorySpace()) {
        optionals.set(4);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(5);
      }
      if (struct.isSetContainerCount()) {
        optionals.set(6);
      }
      if (struct.isSetRunningContainerCount()) {
        optionals.set(7);
      }
      if (struct.isSetDockerVersion()) {
        optionals.set(8);
      }
      if (struct.isSetDockerStatus()) {
        optionals.set(9);
      }
      if (struct.isSetTag()) {
        optionals.set(10);
      }
      if (struct.isSetCallTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetArchitecture()) {
        oprot.writeString(struct.architecture);
      }
      if (struct.isSetFreeDiskSpace()) {
        oprot.writeI64(struct.freeDiskSpace);
      }
      if (struct.isSetFreeMemorySpace()) {
        oprot.writeI64(struct.freeMemorySpace);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI64(struct.responseTime);
      }
      if (struct.isSetContainerCount()) {
        oprot.writeI64(struct.containerCount);
      }
      if (struct.isSetRunningContainerCount()) {
        oprot.writeI64(struct.RunningContainerCount);
      }
      if (struct.isSetDockerVersion()) {
        oprot.writeString(struct.dockerVersion);
      }
      if (struct.isSetDockerStatus()) {
        oprot.writeString(struct.dockerStatus);
      }
      if (struct.isSetTag()) {
        oprot.writeI32(struct.tag);
      }
      if (struct.isSetCallTime()) {
        oprot.writeI64(struct.callTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.architecture = iprot.readString();
        struct.setArchitectureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.freeDiskSpace = iprot.readI64();
        struct.setFreeDiskSpaceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.freeMemorySpace = iprot.readI64();
        struct.setFreeMemorySpaceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.responseTime = iprot.readI64();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.containerCount = iprot.readI64();
        struct.setContainerCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.RunningContainerCount = iprot.readI64();
        struct.setRunningContainerCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dockerVersion = iprot.readString();
        struct.setDockerVersionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dockerStatus = iprot.readString();
        struct.setDockerStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tag = iprot.readI32();
        struct.setTagIsSet(true);
      }
      if (incoming.get(11)) {
        struct.callTime = iprot.readI64();
        struct.setCallTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

