/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gov.sequarius.dockercenter.common.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-05")
public class JobDTO implements org.apache.thrift.TBase<JobDTO, JobDTO._Fields>, java.io.Serializable, Cloneable, Comparable<JobDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobDTO");

  private static final org.apache.thrift.protocol.TField JOBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPLOY_STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("deployStrategy", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_NAME_STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("subNameStrategy", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobDTOTupleSchemeFactory();

  public java.lang.String jobname; // required
  public java.lang.String jobId; // optional
  public java.lang.String status; // optional
  public java.lang.String deployStrategy; // optional
  public java.lang.String subNameStrategy; // optional
  public java.lang.String config; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOBNAME((short)1, "jobname"),
    JOB_ID((short)2, "jobId"),
    STATUS((short)3, "status"),
    DEPLOY_STRATEGY((short)4, "deployStrategy"),
    SUB_NAME_STRATEGY((short)5, "subNameStrategy"),
    CONFIG((short)6, "config");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOBNAME
          return JOBNAME;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // STATUS
          return STATUS;
        case 4: // DEPLOY_STRATEGY
          return DEPLOY_STRATEGY;
        case 5: // SUB_NAME_STRATEGY
          return SUB_NAME_STRATEGY;
        case 6: // CONFIG
          return CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.JOB_ID,_Fields.STATUS,_Fields.DEPLOY_STRATEGY,_Fields.SUB_NAME_STRATEGY,_Fields.CONFIG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOBNAME, new org.apache.thrift.meta_data.FieldMetaData("jobname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPLOY_STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("deployStrategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_NAME_STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("subNameStrategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobDTO.class, metaDataMap);
  }

  public JobDTO() {
  }

  public JobDTO(
    java.lang.String jobname)
  {
    this();
    this.jobname = jobname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobDTO(JobDTO other) {
    if (other.isSetJobname()) {
      this.jobname = other.jobname;
    }
    if (other.isSetJobId()) {
      this.jobId = other.jobId;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDeployStrategy()) {
      this.deployStrategy = other.deployStrategy;
    }
    if (other.isSetSubNameStrategy()) {
      this.subNameStrategy = other.subNameStrategy;
    }
    if (other.isSetConfig()) {
      this.config = other.config;
    }
  }

  public JobDTO deepCopy() {
    return new JobDTO(this);
  }

  @Override
  public void clear() {
    this.jobname = null;
    this.jobId = null;
    this.status = null;
    this.deployStrategy = null;
    this.subNameStrategy = null;
    this.config = null;
  }

  public java.lang.String getJobname() {
    return this.jobname;
  }

  public JobDTO setJobname(java.lang.String jobname) {
    this.jobname = jobname;
    return this;
  }

  public void unsetJobname() {
    this.jobname = null;
  }

  /** Returns true if field jobname is set (has been assigned a value) and false otherwise */
  public boolean isSetJobname() {
    return this.jobname != null;
  }

  public void setJobnameIsSet(boolean value) {
    if (!value) {
      this.jobname = null;
    }
  }

  public java.lang.String getJobId() {
    return this.jobId;
  }

  public JobDTO setJobId(java.lang.String jobId) {
    this.jobId = jobId;
    return this;
  }

  public void unsetJobId() {
    this.jobId = null;
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return this.jobId != null;
  }

  public void setJobIdIsSet(boolean value) {
    if (!value) {
      this.jobId = null;
    }
  }

  public java.lang.String getStatus() {
    return this.status;
  }

  public JobDTO setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public java.lang.String getDeployStrategy() {
    return this.deployStrategy;
  }

  public JobDTO setDeployStrategy(java.lang.String deployStrategy) {
    this.deployStrategy = deployStrategy;
    return this;
  }

  public void unsetDeployStrategy() {
    this.deployStrategy = null;
  }

  /** Returns true if field deployStrategy is set (has been assigned a value) and false otherwise */
  public boolean isSetDeployStrategy() {
    return this.deployStrategy != null;
  }

  public void setDeployStrategyIsSet(boolean value) {
    if (!value) {
      this.deployStrategy = null;
    }
  }

  public java.lang.String getSubNameStrategy() {
    return this.subNameStrategy;
  }

  public JobDTO setSubNameStrategy(java.lang.String subNameStrategy) {
    this.subNameStrategy = subNameStrategy;
    return this;
  }

  public void unsetSubNameStrategy() {
    this.subNameStrategy = null;
  }

  /** Returns true if field subNameStrategy is set (has been assigned a value) and false otherwise */
  public boolean isSetSubNameStrategy() {
    return this.subNameStrategy != null;
  }

  public void setSubNameStrategyIsSet(boolean value) {
    if (!value) {
      this.subNameStrategy = null;
    }
  }

  public java.lang.String getConfig() {
    return this.config;
  }

  public JobDTO setConfig(java.lang.String config) {
    this.config = config;
    return this;
  }

  public void unsetConfig() {
    this.config = null;
  }

  /** Returns true if field config is set (has been assigned a value) and false otherwise */
  public boolean isSetConfig() {
    return this.config != null;
  }

  public void setConfigIsSet(boolean value) {
    if (!value) {
      this.config = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case JOBNAME:
      if (value == null) {
        unsetJobname();
      } else {
        setJobname((java.lang.String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case DEPLOY_STRATEGY:
      if (value == null) {
        unsetDeployStrategy();
      } else {
        setDeployStrategy((java.lang.String)value);
      }
      break;

    case SUB_NAME_STRATEGY:
      if (value == null) {
        unsetSubNameStrategy();
      } else {
        setSubNameStrategy((java.lang.String)value);
      }
      break;

    case CONFIG:
      if (value == null) {
        unsetConfig();
      } else {
        setConfig((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOBNAME:
      return getJobname();

    case JOB_ID:
      return getJobId();

    case STATUS:
      return getStatus();

    case DEPLOY_STRATEGY:
      return getDeployStrategy();

    case SUB_NAME_STRATEGY:
      return getSubNameStrategy();

    case CONFIG:
      return getConfig();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOBNAME:
      return isSetJobname();
    case JOB_ID:
      return isSetJobId();
    case STATUS:
      return isSetStatus();
    case DEPLOY_STRATEGY:
      return isSetDeployStrategy();
    case SUB_NAME_STRATEGY:
      return isSetSubNameStrategy();
    case CONFIG:
      return isSetConfig();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JobDTO)
      return this.equals((JobDTO)that);
    return false;
  }

  public boolean equals(JobDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jobname = true && this.isSetJobname();
    boolean that_present_jobname = true && that.isSetJobname();
    if (this_present_jobname || that_present_jobname) {
      if (!(this_present_jobname && that_present_jobname))
        return false;
      if (!this.jobname.equals(that.jobname))
        return false;
    }

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (!this.jobId.equals(that.jobId))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_deployStrategy = true && this.isSetDeployStrategy();
    boolean that_present_deployStrategy = true && that.isSetDeployStrategy();
    if (this_present_deployStrategy || that_present_deployStrategy) {
      if (!(this_present_deployStrategy && that_present_deployStrategy))
        return false;
      if (!this.deployStrategy.equals(that.deployStrategy))
        return false;
    }

    boolean this_present_subNameStrategy = true && this.isSetSubNameStrategy();
    boolean that_present_subNameStrategy = true && that.isSetSubNameStrategy();
    if (this_present_subNameStrategy || that_present_subNameStrategy) {
      if (!(this_present_subNameStrategy && that_present_subNameStrategy))
        return false;
      if (!this.subNameStrategy.equals(that.subNameStrategy))
        return false;
    }

    boolean this_present_config = true && this.isSetConfig();
    boolean that_present_config = true && that.isSetConfig();
    if (this_present_config || that_present_config) {
      if (!(this_present_config && that_present_config))
        return false;
      if (!this.config.equals(that.config))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJobname()) ? 131071 : 524287);
    if (isSetJobname())
      hashCode = hashCode * 8191 + jobname.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobId()) ? 131071 : 524287);
    if (isSetJobId())
      hashCode = hashCode * 8191 + jobId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeployStrategy()) ? 131071 : 524287);
    if (isSetDeployStrategy())
      hashCode = hashCode * 8191 + deployStrategy.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubNameStrategy()) ? 131071 : 524287);
    if (isSetSubNameStrategy())
      hashCode = hashCode * 8191 + subNameStrategy.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfig()) ? 131071 : 524287);
    if (isSetConfig())
      hashCode = hashCode * 8191 + config.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JobDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJobname()).compareTo(other.isSetJobname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobname, other.jobname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeployStrategy()).compareTo(other.isSetDeployStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeployStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deployStrategy, other.deployStrategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubNameStrategy()).compareTo(other.isSetSubNameStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubNameStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subNameStrategy, other.subNameStrategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JobDTO(");
    boolean first = true;

    sb.append("jobname:");
    if (this.jobname == null) {
      sb.append("null");
    } else {
      sb.append(this.jobname);
    }
    first = false;
    if (isSetJobId()) {
      if (!first) sb.append(", ");
      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetDeployStrategy()) {
      if (!first) sb.append(", ");
      sb.append("deployStrategy:");
      if (this.deployStrategy == null) {
        sb.append("null");
      } else {
        sb.append(this.deployStrategy);
      }
      first = false;
    }
    if (isSetSubNameStrategy()) {
      if (!first) sb.append(", ");
      sb.append("subNameStrategy:");
      if (this.subNameStrategy == null) {
        sb.append("null");
      } else {
        sb.append(this.subNameStrategy);
      }
      first = false;
    }
    if (isSetConfig()) {
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jobname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobDTOStandardScheme getScheme() {
      return new JobDTOStandardScheme();
    }
  }

  private static class JobDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOBNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobname = iprot.readString();
              struct.setJobnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobId = iprot.readString();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPLOY_STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deployStrategy = iprot.readString();
              struct.setDeployStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_NAME_STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subNameStrategy = iprot.readString();
              struct.setSubNameStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.config = iprot.readString();
              struct.setConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobname != null) {
        oprot.writeFieldBegin(JOBNAME_FIELD_DESC);
        oprot.writeString(struct.jobname);
        oprot.writeFieldEnd();
      }
      if (struct.jobId != null) {
        if (struct.isSetJobId()) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deployStrategy != null) {
        if (struct.isSetDeployStrategy()) {
          oprot.writeFieldBegin(DEPLOY_STRATEGY_FIELD_DESC);
          oprot.writeString(struct.deployStrategy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subNameStrategy != null) {
        if (struct.isSetSubNameStrategy()) {
          oprot.writeFieldBegin(SUB_NAME_STRATEGY_FIELD_DESC);
          oprot.writeString(struct.subNameStrategy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.config != null) {
        if (struct.isSetConfig()) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          oprot.writeString(struct.config);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobDTOTupleScheme getScheme() {
      return new JobDTOTupleScheme();
    }
  }

  private static class JobDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.jobname);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJobId()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetDeployStrategy()) {
        optionals.set(2);
      }
      if (struct.isSetSubNameStrategy()) {
        optionals.set(3);
      }
      if (struct.isSetConfig()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetJobId()) {
        oprot.writeString(struct.jobId);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetDeployStrategy()) {
        oprot.writeString(struct.deployStrategy);
      }
      if (struct.isSetSubNameStrategy()) {
        oprot.writeString(struct.subNameStrategy);
      }
      if (struct.isSetConfig()) {
        oprot.writeString(struct.config);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.jobname = iprot.readString();
      struct.setJobnameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.jobId = iprot.readString();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deployStrategy = iprot.readString();
        struct.setDeployStrategyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subNameStrategy = iprot.readString();
        struct.setSubNameStrategyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.config = iprot.readString();
        struct.setConfigIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

