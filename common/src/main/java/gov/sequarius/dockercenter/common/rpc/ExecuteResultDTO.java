/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gov.sequarius.dockercenter.common.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-20")
public class ExecuteResultDTO implements org.apache.thrift.TBase<ExecuteResultDTO, ExecuteResultDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteResultDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteResultDTO");

  private static final org.apache.thrift.protocol.TField RETURN_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnMessage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteResultDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteResultDTOTupleSchemeFactory();

  public String returnMessage; // required
  public int resultCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RETURN_MESSAGE((short)1, "returnMessage"),
    RESULT_CODE((short)2, "resultCode");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_MESSAGE
          return RETURN_MESSAGE;
        case 2: // RESULT_CODE
          return RESULT_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULTCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("returnMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteResultDTO.class, metaDataMap);
  }

  public ExecuteResultDTO() {
  }

  public ExecuteResultDTO(
    String returnMessage,
    int resultCode)
  {
    this();
    this.returnMessage = returnMessage;
    this.resultCode = resultCode;
    setResultCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecuteResultDTO(ExecuteResultDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReturnMessage()) {
      this.returnMessage = other.returnMessage;
    }
    this.resultCode = other.resultCode;
  }

  public ExecuteResultDTO deepCopy() {
    return new ExecuteResultDTO(this);
  }

  @Override
  public void clear() {
    this.returnMessage = null;
    setResultCodeIsSet(false);
    this.resultCode = 0;
  }

  public String getReturnMessage() {
    return this.returnMessage;
  }

  public ExecuteResultDTO setReturnMessage(String returnMessage) {
    this.returnMessage = returnMessage;
    return this;
  }

  public void unsetReturnMessage() {
    this.returnMessage = null;
  }

  /** Returns true if field returnMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnMessage() {
    return this.returnMessage != null;
  }

  public void setReturnMessageIsSet(boolean value) {
    if (!value) {
      this.returnMessage = null;
    }
  }

  public int getResultCode() {
    return this.resultCode;
  }

  public ExecuteResultDTO setResultCode(int resultCode) {
    this.resultCode = resultCode;
    setResultCodeIsSet(true);
    return this;
  }

  public void unsetResultCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULTCODE_ISSET_ID);
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULTCODE_ISSET_ID);
  }

  public void setResultCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULTCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETURN_MESSAGE:
      if (value == null) {
        unsetReturnMessage();
      } else {
        setReturnMessage((String)value);
      }
      break;

    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_MESSAGE:
      return getReturnMessage();

    case RESULT_CODE:
      return getResultCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETURN_MESSAGE:
      return isSetReturnMessage();
    case RESULT_CODE:
      return isSetResultCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecuteResultDTO)
      return this.equals((ExecuteResultDTO)that);
    return false;
  }

  public boolean equals(ExecuteResultDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_returnMessage = true && this.isSetReturnMessage();
    boolean that_present_returnMessage = true && that.isSetReturnMessage();
    if (this_present_returnMessage || that_present_returnMessage) {
      if (!(this_present_returnMessage && that_present_returnMessage))
        return false;
      if (!this.returnMessage.equals(that.returnMessage))
        return false;
    }

    boolean this_present_resultCode = true;
    boolean that_present_resultCode = true;
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (this.resultCode != that.resultCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReturnMessage()) ? 131071 : 524287);
    if (isSetReturnMessage())
      hashCode = hashCode * 8191 + returnMessage.hashCode();

    hashCode = hashCode * 8191 + resultCode;

    return hashCode;
  }

  @Override
  public int compareTo(ExecuteResultDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReturnMessage()).compareTo(other.isSetReturnMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnMessage, other.returnMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExecuteResultDTO(");
    boolean first = true;

    sb.append("returnMessage:");
    if (this.returnMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.returnMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultCode:");
    sb.append(this.resultCode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'resultCode' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExecuteResultDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExecuteResultDTOStandardScheme getScheme() {
      return new ExecuteResultDTOStandardScheme();
    }
  }

  private static class ExecuteResultDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteResultDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteResultDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnMessage = iprot.readString();
              struct.setReturnMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultCode = iprot.readI32();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetResultCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteResultDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.returnMessage != null) {
        oprot.writeFieldBegin(RETURN_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.returnMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
      oprot.writeI32(struct.resultCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExecuteResultDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExecuteResultDTOTupleScheme getScheme() {
      return new ExecuteResultDTOTupleScheme();
    }
  }

  private static class ExecuteResultDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteResultDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteResultDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.resultCode);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReturnMessage()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetReturnMessage()) {
        oprot.writeString(struct.returnMessage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteResultDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.resultCode = iprot.readI32();
      struct.setResultCodeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.returnMessage = iprot.readString();
        struct.setReturnMessageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

