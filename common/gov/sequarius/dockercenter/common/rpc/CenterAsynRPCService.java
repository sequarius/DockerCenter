/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gov.sequarius.dockercenter.common.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-24")
public class CenterAsynRPCService {

  public interface Iface {

    /**
     * 连接主节点
     */
    public void connet() throws org.apache.thrift.TException;

    /**
     * 异步通知命令执行完成
     * 
     * @param executeResultDTO
     */
    public void onCommandExcuteFinish(ExecuteResultDTO executeResultDTO) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connet(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onCommandExcuteFinish(ExecuteResultDTO executeResultDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void connet() throws org.apache.thrift.TException
    {
      send_connet();
    }

    public void send_connet() throws org.apache.thrift.TException
    {
      connet_args args = new connet_args();
      sendBaseOneway("connet", args);
    }

    public void onCommandExcuteFinish(ExecuteResultDTO executeResultDTO) throws org.apache.thrift.TException
    {
      send_onCommandExcuteFinish(executeResultDTO);
    }

    public void send_onCommandExcuteFinish(ExecuteResultDTO executeResultDTO) throws org.apache.thrift.TException
    {
      onCommandExcuteFinish_args args = new onCommandExcuteFinish_args();
      args.setExecuteResultDTO(executeResultDTO);
      sendBaseOneway("onCommandExcuteFinish", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void connet(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connet_call method_call = new connet_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connet_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public connet_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connet", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        connet_args args = new connet_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void onCommandExcuteFinish(ExecuteResultDTO executeResultDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onCommandExcuteFinish_call method_call = new onCommandExcuteFinish_call(executeResultDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onCommandExcuteFinish_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private ExecuteResultDTO executeResultDTO;
      public onCommandExcuteFinish_call(ExecuteResultDTO executeResultDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.executeResultDTO = executeResultDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onCommandExcuteFinish", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onCommandExcuteFinish_args args = new onCommandExcuteFinish_args();
        args.setExecuteResultDTO(executeResultDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connet", new connet());
      processMap.put("onCommandExcuteFinish", new onCommandExcuteFinish());
      return processMap;
    }

    public static class connet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connet_args> {
      public connet() {
        super("connet");
      }

      public connet_args getEmptyArgsInstance() {
        return new connet_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, connet_args args) throws org.apache.thrift.TException {
        iface.connet();
        return null;
      }
    }

    public static class onCommandExcuteFinish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onCommandExcuteFinish_args> {
      public onCommandExcuteFinish() {
        super("onCommandExcuteFinish");
      }

      public onCommandExcuteFinish_args getEmptyArgsInstance() {
        return new onCommandExcuteFinish_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, onCommandExcuteFinish_args args) throws org.apache.thrift.TException {
        iface.onCommandExcuteFinish(args.executeResultDTO);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connet", new connet());
      processMap.put("onCommandExcuteFinish", new onCommandExcuteFinish());
      return processMap;
    }

    public static class connet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connet_args, Void> {
      public connet() {
        super("connet");
      }

      public connet_args getEmptyArgsInstance() {
        return new connet_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, connet_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.connet(resultHandler);
      }
    }

    public static class onCommandExcuteFinish<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onCommandExcuteFinish_args, Void> {
      public onCommandExcuteFinish() {
        super("onCommandExcuteFinish");
      }

      public onCommandExcuteFinish_args getEmptyArgsInstance() {
        return new onCommandExcuteFinish_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, onCommandExcuteFinish_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onCommandExcuteFinish(args.executeResultDTO,resultHandler);
      }
    }

  }

  public static class connet_args implements org.apache.thrift.TBase<connet_args, connet_args._Fields>, java.io.Serializable, Cloneable, Comparable<connet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connet_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connet_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connet_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connet_args.class, metaDataMap);
    }

    public connet_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connet_args(connet_args other) {
    }

    public connet_args deepCopy() {
      return new connet_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof connet_args)
        return this.equals((connet_args)that);
      return false;
    }

    public boolean equals(connet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(connet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connet_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connet_argsStandardScheme getScheme() {
        return new connet_argsStandardScheme();
      }
    }

    private static class connet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connet_argsTupleScheme getScheme() {
        return new connet_argsTupleScheme();
      }
    }

    private static class connet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class onCommandExcuteFinish_args implements org.apache.thrift.TBase<onCommandExcuteFinish_args, onCommandExcuteFinish_args._Fields>, java.io.Serializable, Cloneable, Comparable<onCommandExcuteFinish_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onCommandExcuteFinish_args");

    private static final org.apache.thrift.protocol.TField EXECUTE_RESULT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("executeResultDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onCommandExcuteFinish_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onCommandExcuteFinish_argsTupleSchemeFactory();

    public ExecuteResultDTO executeResultDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXECUTE_RESULT_DTO((short)1, "executeResultDTO");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXECUTE_RESULT_DTO
            return EXECUTE_RESULT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXECUTE_RESULT_DTO, new org.apache.thrift.meta_data.FieldMetaData("executeResultDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecuteResultDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onCommandExcuteFinish_args.class, metaDataMap);
    }

    public onCommandExcuteFinish_args() {
    }

    public onCommandExcuteFinish_args(
      ExecuteResultDTO executeResultDTO)
    {
      this();
      this.executeResultDTO = executeResultDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onCommandExcuteFinish_args(onCommandExcuteFinish_args other) {
      if (other.isSetExecuteResultDTO()) {
        this.executeResultDTO = new ExecuteResultDTO(other.executeResultDTO);
      }
    }

    public onCommandExcuteFinish_args deepCopy() {
      return new onCommandExcuteFinish_args(this);
    }

    @Override
    public void clear() {
      this.executeResultDTO = null;
    }

    public ExecuteResultDTO getExecuteResultDTO() {
      return this.executeResultDTO;
    }

    public onCommandExcuteFinish_args setExecuteResultDTO(ExecuteResultDTO executeResultDTO) {
      this.executeResultDTO = executeResultDTO;
      return this;
    }

    public void unsetExecuteResultDTO() {
      this.executeResultDTO = null;
    }

    /** Returns true if field executeResultDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetExecuteResultDTO() {
      return this.executeResultDTO != null;
    }

    public void setExecuteResultDTOIsSet(boolean value) {
      if (!value) {
        this.executeResultDTO = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXECUTE_RESULT_DTO:
        if (value == null) {
          unsetExecuteResultDTO();
        } else {
          setExecuteResultDTO((ExecuteResultDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXECUTE_RESULT_DTO:
        return getExecuteResultDTO();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXECUTE_RESULT_DTO:
        return isSetExecuteResultDTO();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof onCommandExcuteFinish_args)
        return this.equals((onCommandExcuteFinish_args)that);
      return false;
    }

    public boolean equals(onCommandExcuteFinish_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_executeResultDTO = true && this.isSetExecuteResultDTO();
      boolean that_present_executeResultDTO = true && that.isSetExecuteResultDTO();
      if (this_present_executeResultDTO || that_present_executeResultDTO) {
        if (!(this_present_executeResultDTO && that_present_executeResultDTO))
          return false;
        if (!this.executeResultDTO.equals(that.executeResultDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExecuteResultDTO()) ? 131071 : 524287);
      if (isSetExecuteResultDTO())
        hashCode = hashCode * 8191 + executeResultDTO.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onCommandExcuteFinish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExecuteResultDTO()).compareTo(other.isSetExecuteResultDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecuteResultDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeResultDTO, other.executeResultDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onCommandExcuteFinish_args(");
      boolean first = true;

      sb.append("executeResultDTO:");
      if (this.executeResultDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.executeResultDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (executeResultDTO != null) {
        executeResultDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onCommandExcuteFinish_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public onCommandExcuteFinish_argsStandardScheme getScheme() {
        return new onCommandExcuteFinish_argsStandardScheme();
      }
    }

    private static class onCommandExcuteFinish_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onCommandExcuteFinish_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onCommandExcuteFinish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXECUTE_RESULT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.executeResultDTO = new ExecuteResultDTO();
                struct.executeResultDTO.read(iprot);
                struct.setExecuteResultDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onCommandExcuteFinish_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.executeResultDTO != null) {
          oprot.writeFieldBegin(EXECUTE_RESULT_DTO_FIELD_DESC);
          struct.executeResultDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onCommandExcuteFinish_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public onCommandExcuteFinish_argsTupleScheme getScheme() {
        return new onCommandExcuteFinish_argsTupleScheme();
      }
    }

    private static class onCommandExcuteFinish_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onCommandExcuteFinish_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onCommandExcuteFinish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExecuteResultDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecuteResultDTO()) {
          struct.executeResultDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onCommandExcuteFinish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.executeResultDTO = new ExecuteResultDTO();
          struct.executeResultDTO.read(iprot);
          struct.setExecuteResultDTOIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
