#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def connet(self):
        """
        connet
        """
        pass

    def onCommandExcuteFinish(self, executeResultDTO):
        """
        call back when excute command finish

        Parameters:
         - executeResultDTO
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def connet(self):
        """
        connet
        """
        self.send_connet()

    def send_connet(self):
        self._oprot.writeMessageBegin('connet', TMessageType.ONEWAY, self._seqid)
        args = connet_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onCommandExcuteFinish(self, executeResultDTO):
        """
        call back when excute command finish

        Parameters:
         - executeResultDTO
        """
        self.send_onCommandExcuteFinish(executeResultDTO)

    def send_onCommandExcuteFinish(self, executeResultDTO):
        self._oprot.writeMessageBegin('onCommandExcuteFinish', TMessageType.ONEWAY, self._seqid)
        args = onCommandExcuteFinish_args()
        args.executeResultDTO = executeResultDTO
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["connet"] = Processor.process_connet
        self._processMap["onCommandExcuteFinish"] = Processor.process_onCommandExcuteFinish

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_connet(self, seqid, iprot, oprot):
        args = connet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.connet()
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_onCommandExcuteFinish(self, seqid, iprot, oprot):
        args = onCommandExcuteFinish_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onCommandExcuteFinish(args.executeResultDTO)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

# HELPER FUNCTIONS AND STRUCTURES


class connet_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('connet_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class onCommandExcuteFinish_args(object):
    """
    Attributes:
     - executeResultDTO
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'executeResultDTO', (ExecuteResultDTO, ExecuteResultDTO.thrift_spec), None, ),  # 1
    )

    def __init__(self, executeResultDTO=None,):
        self.executeResultDTO = executeResultDTO

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.executeResultDTO = ExecuteResultDTO()
                    self.executeResultDTO.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('onCommandExcuteFinish_args')
        if self.executeResultDTO is not None:
            oprot.writeFieldBegin('executeResultDTO', TType.STRUCT, 1)
            self.executeResultDTO.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
