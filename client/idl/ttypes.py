#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class CommonException(TException):
    """
    Attributes:
     - code
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, None, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    )

    def __init__(self, code=None, message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CommonException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExecuteResultDTO(object):
    """
    Attributes:
     - returnMessage
     - resultCode
     - nodeTag
     - commandTag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'returnMessage', 'UTF8', None, ),  # 1
        (2, TType.I32, 'resultCode', None, None, ),  # 2
        (3, TType.I32, 'nodeTag', None, None, ),  # 3
        (4, TType.I32, 'commandTag', None, None, ),  # 4
    )

    def __init__(self, returnMessage=None, resultCode=None, nodeTag=None, commandTag=None,):
        self.returnMessage = returnMessage
        self.resultCode = resultCode
        self.nodeTag = nodeTag
        self.commandTag = commandTag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.returnMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.resultCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nodeTag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.commandTag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExecuteResultDTO')
        if self.returnMessage is not None:
            oprot.writeFieldBegin('returnMessage', TType.STRING, 1)
            oprot.writeString(self.returnMessage.encode('utf-8') if sys.version_info[0] == 2 else self.returnMessage)
            oprot.writeFieldEnd()
        if self.resultCode is not None:
            oprot.writeFieldBegin('resultCode', TType.I32, 2)
            oprot.writeI32(self.resultCode)
            oprot.writeFieldEnd()
        if self.nodeTag is not None:
            oprot.writeFieldBegin('nodeTag', TType.I32, 3)
            oprot.writeI32(self.nodeTag)
            oprot.writeFieldEnd()
        if self.commandTag is not None:
            oprot.writeFieldBegin('commandTag', TType.I32, 4)
            oprot.writeI32(self.commandTag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.resultCode is None:
            raise TProtocolException(message='Required field resultCode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandDTO(object):
    """
    执行命令dto


    Attributes:
     - command: 命令
     - params: 参数
     - nodeTag: 执行节点tag
     - commandTag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'command', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'params', (TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.I32, 'nodeTag', None, None, ),  # 3
        (4, TType.I32, 'commandTag', None, None, ),  # 4
    )

    def __init__(self, command=None, params=None, nodeTag=None, commandTag=None,):
        self.command = command
        self.params = params
        self.nodeTag = nodeTag
        self.commandTag = commandTag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.command = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.params.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nodeTag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.commandTag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CommandDTO')
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 1)
            oprot.writeString(self.command.encode('utf-8') if sys.version_info[0] == 2 else self.command)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.params))
            for iter6 in self.params:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodeTag is not None:
            oprot.writeFieldBegin('nodeTag', TType.I32, 3)
            oprot.writeI32(self.nodeTag)
            oprot.writeFieldEnd()
        if self.commandTag is not None:
            oprot.writeFieldBegin('commandTag', TType.I32, 4)
            oprot.writeI32(self.commandTag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.command is None:
            raise TProtocolException(message='Required field command is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommonResultDTO(object):
    """
    Attributes:
     - resultCode
     - result
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'resultCode', None, None, ),  # 1
        (2, TType.BOOL, 'result', None, None, ),  # 2
        (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
    )

    def __init__(self, resultCode=None, result=None, message=None,):
        self.resultCode = resultCode
        self.result = result
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.resultCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CommonResultDTO')
        if self.resultCode is not None:
            oprot.writeFieldBegin('resultCode', TType.I32, 1)
            oprot.writeI32(self.resultCode)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.resultCode is None:
            raise TProtocolException(message='Required field resultCode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfoDTO(object):
    """
    节点信息DTO


    Attributes:
     - name: 名称
     - ip: ip
     - architecture: 操作系统类型
     - freeDiskSpace: 剩余磁盘空间 (kb)
     - freeMemorySpace: 剩余内存空间 (kb)
     - responseTime: 响应时间(ms)
     - containerCount: 容器数量
     - RunningContainerCount: 正在运行容器数量
     - dockerVersion: docker 版本信息
     - dockerStatus: docker 状态
     - tag: 节点tag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'architecture', 'UTF8', None, ),  # 3
        (4, TType.I64, 'freeDiskSpace', None, None, ),  # 4
        (5, TType.I64, 'freeMemorySpace', None, None, ),  # 5
        (6, TType.I64, 'responseTime', None, None, ),  # 6
        (7, TType.I64, 'containerCount', None, None, ),  # 7
        (8, TType.I64, 'RunningContainerCount', None, None, ),  # 8
        (9, TType.STRING, 'dockerVersion', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'dockerStatus', 'UTF8', None, ),  # 10
        (11, TType.I32, 'tag', None, None, ),  # 11
    )

    def __init__(self, name=None, ip=None, architecture=None, freeDiskSpace=None, freeMemorySpace=None, responseTime=None, containerCount=None, RunningContainerCount=None, dockerVersion=None, dockerStatus=None, tag=None,):
        self.name = name
        self.ip = ip
        self.architecture = architecture
        self.freeDiskSpace = freeDiskSpace
        self.freeMemorySpace = freeMemorySpace
        self.responseTime = responseTime
        self.containerCount = containerCount
        self.RunningContainerCount = RunningContainerCount
        self.dockerVersion = dockerVersion
        self.dockerStatus = dockerStatus
        self.tag = tag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.architecture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.freeDiskSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.freeMemorySpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.responseTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.containerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.RunningContainerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.dockerVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.dockerStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.tag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('NodeInfoDTO')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.architecture is not None:
            oprot.writeFieldBegin('architecture', TType.STRING, 3)
            oprot.writeString(self.architecture.encode('utf-8') if sys.version_info[0] == 2 else self.architecture)
            oprot.writeFieldEnd()
        if self.freeDiskSpace is not None:
            oprot.writeFieldBegin('freeDiskSpace', TType.I64, 4)
            oprot.writeI64(self.freeDiskSpace)
            oprot.writeFieldEnd()
        if self.freeMemorySpace is not None:
            oprot.writeFieldBegin('freeMemorySpace', TType.I64, 5)
            oprot.writeI64(self.freeMemorySpace)
            oprot.writeFieldEnd()
        if self.responseTime is not None:
            oprot.writeFieldBegin('responseTime', TType.I64, 6)
            oprot.writeI64(self.responseTime)
            oprot.writeFieldEnd()
        if self.containerCount is not None:
            oprot.writeFieldBegin('containerCount', TType.I64, 7)
            oprot.writeI64(self.containerCount)
            oprot.writeFieldEnd()
        if self.RunningContainerCount is not None:
            oprot.writeFieldBegin('RunningContainerCount', TType.I64, 8)
            oprot.writeI64(self.RunningContainerCount)
            oprot.writeFieldEnd()
        if self.dockerVersion is not None:
            oprot.writeFieldBegin('dockerVersion', TType.STRING, 9)
            oprot.writeString(self.dockerVersion.encode('utf-8') if sys.version_info[0] == 2 else self.dockerVersion)
            oprot.writeFieldEnd()
        if self.dockerStatus is not None:
            oprot.writeFieldBegin('dockerStatus', TType.STRING, 10)
            oprot.writeString(self.dockerStatus.encode('utf-8') if sys.version_info[0] == 2 else self.dockerStatus)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.I32, 11)
            oprot.writeI32(self.tag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
